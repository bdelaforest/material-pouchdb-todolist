/**
 * Following JohnPapa angular styleguide...
 * https://github.com/johnpapa/angular-styleguide
 */
(function() {
    'use strict';

    angular
        .module('app', [
            'indexedDB',
            'ngMaterial',
            'pouchDB',
            // 'ngSanitize'
            // 'ngAnimate'
        ])
        .filter('nl2br', nl2br)
        .config(AppConfig)
        .constant('cfg', {
            'storeName': 'task',
            'pouchDBName': 'tasks',
            'pouchDBRemote': 'https://bdelaforest.iriscouch.com/',
            // 'pouchDBRemote': 'http://localhost:5984/'
        });


    AppConfig.$inject = ['$indexedDBProvider', '$mdThemingProvider', '$mdIconProvider', 'cfg'];
    function AppConfig($indexedDBProvider, $mdThemingProvider, $mdIconProvider, cfg) {

        // $indexedDBProvider
        //     .connection('todos')
        //     .upgradeDatabase(1, function(event, db, tx){
        //         var objStore = db.createObjectStore(cfg.storeName, {
        //             keyPath: 'id',
        //             autoIncrement: true
        //         });
        //         // objStore.createIndex('done', 'done', {unique: false});
        //     });

        $mdIconProvider
            .icon("menu", "app/assets/svg/menu.svg", 24);

        $mdThemingProvider.theme('default')
            .primaryPalette('indigo')
            .accentPalette('blue');

        // pouchDB.init();
    }

    nl2br.$inject = ['$sce'];
    function nl2br($sce) {
        return function(input) {
            if (input !== void 0) {
                return $sce.trustAsHtml(input.replace(/\n/g, '<br>'));
            }
        };
    }

})();

(function() {
    'use strict';

     angular
        .module('app')
        .controller('DialogController', DialogController);

    DialogController.$inject = ['$mdDialog'];
    function DialogController($mdDialog) {
        var vm = this;

        vm.task = {};
        vm.cancel = cancel;
        vm.success = success;

        ////////////

        function cancel() {
            $mdDialog.cancel();
        }

        function success(task) {
            $mdDialog.hide(task);
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('pouchDB', [])
        .factory('pouchDB', PouchDBService);

    PouchDBService.$inject = ['cfg'];
    function PouchDBService(cfg) {
        //create DB
        var db = new PouchDB(cfg.pouchDBName, {
            auto_compaction: true
        });

        //Sync remote and local DB
        db.sync(cfg.pouchDBRemote+cfg.pouchDBName, {
            live: true,
            retry: true
        });

        return db;
    }

})();

(function() {
    'use strict';

    angular
        .module('app')
        .factory('taskService', TaskService);


    TaskService.$inject = ['$indexedDB', '$q', 'cfg', 'pouchDB'];
    function TaskService($indexedDB, $q, cfg, pouchDB) {

        var service = {
            save:   save,
            getOne: getOne,
            getAll: getAll,
            clearTasks: clearTasks
        };

        return service;

        ////////////

        function save(task) {
            var deferred = $q.defer();

            //promise callbacks
            function success(response) {
                deferred.resolve(response);
            }
            function error(err) {
                console.log('After insert error', err);
            }

            if (!task._id) {
                var date = new Date().toISOString();
                task._id       = date;
                task.createdAt = date;
                task.done      = false;
            }

            pouchDB.put(task)
                .then(success)
                .catch(error);

            return deferred.promise;
        }


        function getOne(id) {
            return pouchDB.get(id);
        }

        function getAll(filter) {
            var deferred = $q.defer(),
                status   = '',
                options  = {include_docs : true};

            function success(response) {
                var tasks = [];
                for(var i in response.rows) {
                    tasks.push(response.rows[i].doc);
                }
                deferred.resolve(tasks);
            }
            function error(err) {
                console.log('Error', err)
            }


            if (typeof filter === 'undefined' || filter === 'all') {
                pouchDB.allDocs(options)
                    .then(success)
                    .catch(error);
            }
            else {
                if      (filter === 'todo') { status = false; }
                else if (filter === 'done') { status = true; }

                pouchDB.query(function (doc, emit) {
                    if (doc.done === status) { emit(doc); }
                }, options)
                    .then(success)
                    .catch(error);
            }

            return deferred.promise;
        }

        function clearTasks(filter) {
            var deferred = $q.defer();

            getAll(filter).then(function(tasks) {
                _.each(tasks, function(task, i) {
                    tasks[i]._deleted = true;
                });
                pouchDB.bulkDocs(tasks).then(function(result) {
                    deferred.resolve(result);
                });
            });

            return deferred.promise;
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app')
        .controller('TasksController', TasksController);

    TasksController.$inject = ['$q', '$filter', '$timeout', '$mdDialog', '$mdSidenav', 'taskService', 'pouchDB'];
    function TasksController($q, $filter, $timeout, $mdDialog, $mdSidenav, taskService, pouchDB) {
        var vm = this;

        // View Variables
        vm.tasks         = [];
        vm.filteredTasks = [];
        vm.filter        = 'all';
        vm.selectTask    = selectTask;
        vm.clearTasks    = clearTasks;
        vm.showForm      = showForm;
        vm.save          = save;
        vm.toggleSidebar = toggleSidebar;
        vm.filterTasks   = filterTasks;
        vm.isElem        = isElem;
        vm.confirm       = confirm;
        vm.selected      = {};

        vm.debug = function(arg) {
            console.log('debug', arg);
        };

        ////////////

        function loadTasks() {
            taskService.getAll(vm.filter).then(function(tasks) {
                vm.tasks = tasks;

                //check selected
                var idx = _.findIndex(vm.tasks, function(task) {
                        return task._id == vm.selected._id;
                    });

                //select task only if visible in list
                if (idx >= 0) { vm.selected = vm.tasks[idx]; }
                else          { vm.selected = {} }
            });
        }
        loadTasks();


        /**
         * ViewModel functions
         */

        function selectTask(task)Â {
            var pending = $mdSidenav('left').close() || $q.when(true);

            pending.then(function(){
                vm.selected = task;
            });
        }

        /**
         * Clear scoped tasks ('done' for now)
         */
        function clearTasks() {
            taskService.clearTasks('done').then(function() {
                //update tasks list
                loadTasks();
            });
        }

        function showForm(ev) {
            $mdDialog.show({
                controller: 'DialogController',
                controllerAs: 'vm',
                templateUrl: 'app/newTaskForm.tpl.html',
                targetEvent: ev,
            })
            .then(function(task) {
                save(task);
            });
        };


        // function toggleState(task) {
        function save(task, timeout) {
            function saveFunc() {
                taskService.save(task).then(function() {
                    //update tasks list
                    loadTasks();
                });
            }

            if (typeof timeout !== 'undefined') {
                vm.selected = task;
                $timeout(function() {
                    saveFunc();
                }, 300);
            }
            else {
                saveFunc();
            }
        }


        function toggleSidebar() {
            var pending = $q.when(true);
            pending.then(function(){
                $mdSidenav('left').toggle();
            });
        }


        /**
         * Filter list of task according to selected tab
         */
        function filterTasks(filter) {
            vm.filter = filter;
            loadTasks();
        }


        function isElem(elemName, event) {
            return elemName == event.target.localName;
        }

        function confirm(ev, cb) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Are you sure ?')
                .content('Do you really want to clear all the tasks marked as DONE ?')
                .ariaLabel('Confirm choice')
                .ok('YES')
                .cancel('NO')
                .targetEvent(ev);

            $mdDialog.show(confirm).then(function() {
                cb();
            }, function() {
                console.log('Action aborted');
            });
        }


    }
})();
